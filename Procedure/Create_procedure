--CREATE PROCEDURE

--CREAZIONE TIPOLOGIA ABBONAMENTO--
create or replace PROCEDURE creazione_abbonamento(nome_tipologia_abbonamento VARCHAR2,
                                                  durata_abbonamento NUMBER,
                                                  costo_abbonamento NUMBER,
                                                  nome_corso1 VARCHAR2,
                                                  obiettivo1 VARCHAR2 := NULL,
                                                  nome_corso2 VARCHAR2 := NULL,
                                                  obiettivo2 VARCHAR2 := NULL,
                                                  nome_corso3 VARCHAR2 := NULL,
                                                  obiettivo3 VARCHAR2 := NULL,
                                                  nome_corso4 VARCHAR2 := NULL,
                                                  obiettivo4 VARCHAR2 := NULL)
    AS

    BEGIN
        --si crea la tipologia abbonamento--
        INSERT INTO Tipologia_abbonamento VALUES (nome_tipologia_abbonamento, durata_abbonamento, costo_abbonamento);

        --si controlla se il corso non esiste e nel caso lo si crea--
        INSERT INTO corso (nome_corso, obiettivo) 
            SELECT nome_corso1, obiettivo1 
            FROM dual 
            WHERE NOT EXISTS(SELECT * FROM corso WHERE nome_corso = nome_corso1);

        --si assicia il corso alla tipologia abbonamento--
        INSERT INTO Compreso VALUES (nome_corso1, nome_tipologia_abbonamento, durata_abbonamento);

        --si controlla se si vuole aggiunge un ulteriore corso all'abbonamento--
        IF (nome_corso2 IS NOT NULL) THEN
            --si controlla se il corso non esiste e nel caso lo si crea--
            INSERT INTO corso (nome_corso, obiettivo) 
                SELECT nome_corso2, obiettivo2 
                FROM dual 
                WHERE NOT EXISTS(SELECT * FROM corso WHERE nome_corso = nome_corso2);

            --si assicia il corso alla tipologia abbonamento--
            INSERT INTO Compreso VALUES (nome_corso2, nome_tipologia_abbonamento, durata_abbonamento);
        END IF;

        --si controlla se si vuole aggiunge un ulteriore corso all'abbonamento--        
        IF (nome_corso3 IS NOT NULL) THEN
            --si controlla se il corso non esiste e nel caso lo si crea--
            INSERT INTO corso (nome_corso, obiettivo) 
                SELECT nome_corso3, obiettivo3 
                FROM dual 
                WHERE NOT EXISTS(SELECT * FROM corso WHERE nome_corso = nome_corso3);

            --si assicia il corso alla tipologia abbonamento--
            INSERT INTO Compreso VALUES (nome_corso3, nome_tipologia_abbonamento, durata_abbonamento);
        END IF;

        --si controlla se si vuole aggiunge un ulteriore corso all'abbonamento--
        IF (nome_corso4 IS NOT NULL) THEN
            --si controlla se il corso non esiste e nel caso lo si crea--
            INSERT INTO corso (nome_corso, obiettivo) 
                SELECT nome_corso4, obiettivo4 
                FROM dual 
                WHERE NOT EXISTS(SELECT * FROM corso WHERE nome_corso = nome_corso4);

            --si assicia il corso alla tipologia abbonamento--
            INSERT INTO Compreso VALUES (nome_corso4, nome_tipologia_abbonamento, durata_abbonamento);
        END IF;

    END;
    
--COMPILA SCHEDA ALLENAMENTO--
create or replace PROCEDURE compila_scheda( data_inizio_scheda DATE,
                                            data_fine_scheda DATE,
                                            fk_scheda_utente CHAR,
                                            fk_dipendente CHAR,
                                            numero_serie NUMBER,
                                            fk_esercizio VARCHAR2,
                                            peso NUMBER,
                                            numero_ripetizioni NUMBER,
                                            secondi_di_recupero NUMBER,
                                            numero_serie2 NUMBER := NULL,
                                            fk_esercizio2 VARCHAR2 := NULL,
                                            peso2 NUMBER := NULL,
                                            numero_ripetizioni2 NUMBER := NULL,
                                            secondi_di_recupero2 NUMBER := NULL,
                                            numero_serie3 NUMBER := NULL,
                                            fk_esercizio3 VARCHAR2 := NULL,
                                            peso3 NUMBER := NULL,
                                            numero_ripetizioni3 NUMBER := NULL,
                                            secondi_di_recupero3 NUMBER := NULL,
                                            numero_serie4 NUMBER := NULL,
                                            fk_esercizio4 VARCHAR2 := NULL,
                                            peso4 NUMBER := NULL,
                                            numero_ripetizioni4 NUMBER := NULL,
                                            secondi_di_recupero4 NUMBER := NULL,
                                            numero_serie5 NUMBER := NULL,
                                            fk_esercizio5 VARCHAR2 := NULL,
                                            peso5 NUMBER := NULL,
                                            numero_ripetizioni5 NUMBER := NULL,
                                            secondi_di_recupero5 NUMBER := NULL,
                                            numero_serie6 NUMBER := NULL,
                                            fk_esercizio6 VARCHAR2 := NULL,
                                            peso6 NUMBER := NULL,
                                            numero_ripetizioni6 NUMBER := NULL,
                                            secondi_di_recupero6 NUMBER := NULL,
                                            numero_serie7 NUMBER := NULL,
                                            fk_esercizio7 VARCHAR2 := NULL,
                                            peso7 NUMBER := NULL,
                                            numero_ripetizioni7 NUMBER := NULL,
                                            secondi_di_recupero7 NUMBER := NULL,
                                            numero_serie8 NUMBER := NULL,
                                            fk_esercizio8 VARCHAR2 := NULL,
                                            peso8 NUMBER := NULL,
                                            numero_ripetizioni8 NUMBER := NULL,
                                            secondi_di_recupero8 NUMBER := NULL,
                                            numero_serie9 NUMBER := NULL,
                                            fk_esercizio9 VARCHAR2 := NULL,
                                            peso9 NUMBER := NULL,
                                            numero_ripetizioni9 NUMBER := NULL,
                                            secondi_di_recupero9 NUMBER := NULL) 
    AS
        mansione_dip dipendente.mansione%type;
        abbonamento_sala_utente compreso%rowtype;
        
        mansione_exc EXCEPTION;
        abbonamento_nome_exc EXCEPTION;

    BEGIN
    
        --controlliamo se l'utente ha pagato e se ha consegnato il certificato medico--
        SELECT * INTO abbonamento_sala_utente FROM Compreso 
        WHERE Compreso.fk_abbonamento_nome 
        IN (SELECT fk_abbonamento_nome 
            FROM Sottoscrizione 
            WHERE fk_utente = fk_scheda_utente 
            AND UPPER(ha_pagato) = 'S' 
            AND UPPER(certificato_medico) = 'S') 
        AND LOWER(fk_corso) = 'sala';
        
        SELECT mansione INTO mansione_dip FROM dipendente WHERE fk_persona = fk_dipendente;
        
        --controlliamo se la mansione del dipendente Ã¨ diversa da istruttore oppure null--
        IF(UPPER(mansione_dip) != 'ISTRUTTORE' OR mansione_dip IS NULL) THEN
            RAISE mansione_exc; --viene lanciata l'eccezione
        END IF;
        
        --creazione della scheda--
        INSERT INTO Scheda_di_allenamento VALUES(data_inizio_scheda, fk_scheda_utente, fk_dipendente, data_fine_scheda);
        
        --inserimento del primo esercizio--
        INSERT INTO Contiene VALUES(numero_serie, data_inizio_scheda, fk_scheda_utente, fk_esercizio, peso, numero_ripetizioni, secondi_di_recupero);
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie2 IS NOT NULL) AND (fk_esercizio2 IS NOT NULL) AND (secondi_di_recupero2 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie2, data_inizio_scheda, fk_scheda_utente, fk_esercizio2, peso2, numero_ripetizioni2, secondi_di_recupero2);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie3 IS NOT NULL) AND (fk_esercizio3 IS NOT NULL) AND (secondi_di_recupero3 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie3, data_inizio_scheda, fk_scheda_utente, fk_esercizio3, peso3, numero_ripetizioni3, secondi_di_recupero3);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie4 IS NOT NULL) AND (fk_esercizio4 IS NOT NULL) AND (secondi_di_recupero4 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie4, data_inizio_scheda, fk_scheda_utente, fk_esercizio4, peso4, numero_ripetizioni4, secondi_di_recupero4);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie5 IS NOT NULL) AND (fk_esercizio5 IS NOT NULL) AND (secondi_di_recupero5 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie5, data_inizio_scheda, fk_scheda_utente, fk_esercizio5, peso5, numero_ripetizioni5, secondi_di_recupero5);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie6 IS NOT NULL) AND (fk_esercizio6 IS NOT NULL) AND (secondi_di_recupero6 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie6, data_inizio_scheda, fk_scheda_utente, fk_esercizio6, peso6, numero_ripetizioni6, secondi_di_recupero6);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie7 IS NOT NULL) AND (fk_esercizio7 IS NOT NULL) AND (secondi_di_recupero7 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie7, data_inizio_scheda, fk_scheda_utente, fk_esercizio7, peso7, numero_ripetizioni7, secondi_di_recupero7);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie8 IS NOT NULL) AND (fk_esercizio8 IS NOT NULL) AND (secondi_di_recupero8 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie8, data_inizio_scheda, fk_scheda_utente, fk_esercizio8, peso8, numero_ripetizioni8, secondi_di_recupero8);
        END IF;
        
        --controlliamo se i valori obbligatori non sono null inserendo poi l'esercizio--
        IF ((numero_serie9 IS NOT NULL) AND (fk_esercizio9 IS NOT NULL) AND (secondi_di_recupero9 IS NOT NULL)) THEN
            INSERT INTO Contiene 
            VALUES(numero_serie9, data_inizio_scheda, fk_scheda_utente, fk_esercizio9, peso9, numero_ripetizioni9, secondi_di_recupero9);
        END IF;
        
    EXCEPTION
        WHEN mansione_exc THEN 
            RAISE_APPLICATION_ERROR('-20100', 'LA MANSIONE DEL DIPENDENTE Ã DIVERSA DA ISTRUTTORE: ' || mansione_dip);
        
    END;
    
--VENDITA PRODOTTI--
create or replace PROCEDURE vendita_prodotti(sede_via VARCHAR2,
                                             sede_civico VARCHAR2,
                                             sede_cap VARCHAR2,
                                             codice_a_barre1 CHAR,
                                             quantita_venduta1 NUMBER,
                                             codice_a_barre2 CHAR := NULL,
                                             quantita_venduta2 NUMBER := NULL,
                                             codice_a_barre3 CHAR := NULL,
                                             quantita_venduta3 NUMBER := NULL,
                                             codice_a_barre4 CHAR := NULL,
                                             quantita_venduta4 NUMBER := NULL,
                                             codice_a_barre5 CHAR := NULL,
                                             quantita_venduta5 NUMBER := NULL)
    AS
        giacenza_exc EXCEPTION;

        giacenzaX Prodotto.giacenza%type;
        prezzo_vendita_un Prodotto.prezzo_vendita_unitario%type;
        prezzo_totX Scontrino.prezzo_totale%type := 0;

    BEGIN

        --ricaviamo la giacenza del prodotto da vendere--
        SELECT giacenza, prezzo_vendita_unitario INTO giacenzaX, prezzo_vendita_un 
            FROM Prodotto where codice_a_barre = codice_a_barre1;

        --calcolo del totale dello scontrino--
        prezzo_totX := prezzo_totX + (prezzo_vendita_un * quantita_venduta1);

        --controlliamo se la giacenza del prodotto da vendere Ã¨ minore della quantita che si vuole vendere--
        IF (giacenzaX < quantita_venduta1) THEN
            RAISE giacenza_exc;
        END IF;

        IF (codice_a_barre2 IS NOT NULL AND quantita_venduta2 IS NOT NULL) THEN
            --ricaviamo la giacenza del prodotto da vendere--
            SELECT giacenza, prezzo_vendita_unitario INTO giacenzaX, prezzo_vendita_un 
                FROM Prodotto where codice_a_barre = codice_a_barre2;

            --controlliamo se la giacenza del prodotto da vendere Ã¨ minore della quantita che si vuole vendere--
            IF (giacenzaX < quantita_venduta2) THEN
                RAISE giacenza_exc;
            END IF;

            --calcolo del totale dello scontrino--
            prezzo_totX := prezzo_totX + (prezzo_vendita_un * quantita_venduta2);
        END IF;

        IF (codice_a_barre3 IS NOT NULL AND quantita_venduta3 IS NOT NULL) THEN
            --ricaviamo la giacenza del prodotto da vendere--
            SELECT giacenza, prezzo_vendita_unitario INTO giacenzaX, prezzo_vendita_un 
                FROM Prodotto where codice_a_barre = codice_a_barre3;

            --controlliamo se la giacenza del prodotto da vendere Ã¨ minore della quantita che si vuole vendere--
            IF (giacenzaX < quantita_venduta3) THEN
                RAISE giacenza_exc;
            END IF;

            --calcolo del totale dello scontrino--
            prezzo_totX := prezzo_totX + (prezzo_vendita_un * quantita_venduta3);
        END IF;

        IF (codice_a_barre4 IS NOT NULL AND quantita_venduta4 IS NOT NULL) THEN
            --ricaviamo la giacenza del prodotto da vendere--
            SELECT giacenza, prezzo_vendita_unitario INTO giacenzaX, prezzo_vendita_un 
                FROM Prodotto where codice_a_barre = codice_a_barre4;

            --controlliamo se la giacenza del prodotto da vendere Ã¨ minore della quantita che si vuole vendere--
            IF (giacenzaX < quantita_venduta4) THEN
                RAISE giacenza_exc;
            END IF;

            --calcolo del totale dello scontrino--
            prezzo_totX := prezzo_totX + (prezzo_vendita_un * quantita_venduta4);
        END IF;

        IF (codice_a_barre5 IS NOT NULL AND quantita_venduta5 IS NOT NULL) THEN
            --ricaviamo la giacenza del prodotto da vendere--
            SELECT giacenza, prezzo_vendita_unitario INTO giacenzaX, prezzo_vendita_un 
                FROM Prodotto where codice_a_barre = codice_a_barre5;

            --controlliamo se la giacenza del prodotto da vendere Ã¨ minore della quantita che si vuole vendere--
            IF (giacenzaX < quantita_venduta5) THEN
                RAISE giacenza_exc;
            END IF;

            --calcolo del totale dello scontrino--
            prezzo_totX := prezzo_totX + (prezzo_vendita_un * quantita_venduta5);
        END IF;

        --creazione scontrino--
        INSERT INTO Scontrino (id_scontrino, fk_sede_via, fk_sede_civico, fk_sede_cap, prezzo_totale)
            VALUES (id_scontrino_seq.nextval, sede_via, sede_civico, sede_cap, prezzo_totX);

        --aggiorniamo la giacenza di tutti i prodotti ed inseriamo la vendita--
        UPDATE Prodotto SET giacenza = (giacenza - quantita_venduta1) WHERE codice_a_barre = codice_a_barre1;
        INSERT INTO Vendita VALUES(id_scontrino_seq.currval, codice_a_barre1, quantita_venduta1);

        IF (codice_a_barre2 IS NOT NULL) THEN
            UPDATE Prodotto SET giacenza = (giacenza - quantita_venduta2) WHERE codice_a_barre = codice_a_barre2;
            INSERT INTO Vendita VALUES(id_scontrino_seq.currval, codice_a_barre2, quantita_venduta2);
        END IF;

        IF (codice_a_barre3 IS NOT NULL) THEN
            UPDATE Prodotto SET giacenza = (giacenza - quantita_venduta3) WHERE codice_a_barre = codice_a_barre3;
            INSERT INTO Vendita VALUES(id_scontrino_seq.currval, codice_a_barre3, quantita_venduta3);
        END IF;

        IF (codice_a_barre4 IS NOT NULL) THEN
            UPDATE Prodotto SET giacenza = (giacenza - quantita_venduta4) WHERE codice_a_barre = codice_a_barre4;
            INSERT INTO Vendita VALUES(id_scontrino_seq.currval, codice_a_barre4, quantita_venduta4);
        END IF;

        IF (codice_a_barre5 IS NOT NULL) THEN
            UPDATE Prodotto SET giacenza = (giacenza - quantita_venduta5) WHERE codice_a_barre = codice_a_barre5;
            INSERT INTO Vendita VALUES(id_scontrino_seq.currval, codice_a_barre5, quantita_venduta5);
        END IF;

    EXCEPTION
        WHEN giacenza_exc THEN 
            RAISE_APPLICATION_ERROR('-20101', 'LA GIACENZA Ã MINORE DELLA QUANTITA CHE SI VUOL VENDERE: ' || giacenzaX);

    END;
