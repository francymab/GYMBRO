------CREAZIONE TABELLE-------

------PERSONA------
CREATE TABLE Persona (
    numero_documento_persona CHAR(9),
    nome_persona             VARCHAR2(15) NOT NULL,
    cognome_persona          VARCHAR2(15) NOT NULL,
    genere_persona           CHAR(1) CHECK ( UPPER(genere_persona) = 'M'
                                   OR UPPER(genere_persona) = 'F' ) NOT NULL,
    codice_fiscale_persona   CHAR(16) UNIQUE,
    data_di_nascita          DATE NOT NULL, 		
    eta_persona              NUMBER(2, 0),
    via_persona              VARCHAR2(30),
    civico_persona           VARCHAR2(5),
    cap_persona              NUMBER(5, 0),
    telefono_persona         CHAR(10) UNIQUE,
    
    CONSTRAINT pk_persona PRIMARY KEY ( numero_documento_persona )
);

------SEDE------
CREATE TABLE Sede (
    via_sede      VARCHAR2(30),
    civico_sede   VARCHAR2(5),
    cap_sede      NUMBER(5, 0),
    metri_quadri  NUMBER(4, 0) NOT NULL CHECK ( metri_quadri > 0 ),
    telefono_sede VARCHAR2(10) NOT NULL,
    
    CONSTRAINT pk_sede PRIMARY KEY ( via_sede, civico_sede, cap_sede )
);

------UTENTE------
CREATE TABLE Utente (
    numero_documento_utente CHAR(9),
    numero_tessera          CHAR(8) UNIQUE,
    
    CONSTRAINT pk_utente PRIMARY KEY ( numero_documento_utente ),
    CONSTRAINT fk_utente FOREIGN KEY ( numero_documento_utente )
        REFERENCES persona ( numero_documento_persona ) ON DELETE CASCADE
);

------DIPENDENTE------
CREATE TABLE Dipendente (
    numero_documento_dipendente CHAR(9),
    codice_iban                 CHAR(27) NOT NULL,
    mansione                    VARCHAR2(30) CHECK ( UPPER(mansione) = 'ISTRUTTORE'
                                OR UPPER(mansione) = 'SEGRETARIA'
                                OR UPPER(mansione) = 'RESPONSABILE' ) NOT NULL,
    stipendio_mensile           NUMBER(5, 2) NOT NULL,
    titolo_di_studio            VARCHAR2(40),
    via_sede                    VARCHAR2(30),
    civico_sede                 VARCHAR2(5),
    cap_sede                    NUMBER(5, 0),
    data_di_licenziamento       DATE,
    
    CONSTRAINT pk_dipendente PRIMARY KEY ( numero_documento_dipendente ),
    CONSTRAINT fk_persona_dipendente FOREIGN KEY ( numero_documento_dipendente )
        REFERENCES Persona ( numero_documento_persona )
        ON DELETE CASCADE,
    CONSTRAINT fk_sede_dipendente FOREIGN KEY ( via_sede,
                                                civico_sede,
                                                cap_sede )
        REFERENCES Sede ( via_sede,
                          civico_sede,
                          cap_sede ) ON DELETE SET NULL
);

------SCHEDA DI ALLENAMENTO------
CREATE TABLE Scheda_di_allenamento (
    numero_documento_utente     CHAR(9),
    numero_documento_istruttore CHAR(9) NOT NULL,
    data_inizio_scheda          DATE,
    data_fine_scheda            DATE NOT NULL,
    
    CONSTRAINT pk_scheda PRIMARY KEY ( numero_documento_utente,
                                       data_inizio_scheda ),
    CONSTRAINT fk_scheda_utente FOREIGN KEY ( numero_documento_utente )
        REFERENCES utente ( numero_documento_utente ) ON DELETE CASCADE,
    CONSTRAINT fk_scheda_istruttore FOREIGN KEY ( numero_documento_istruttore )
        REFERENCES dipendente ( numero_documento_dipendente ) ON DELETE CASCADE,
        
    CONSTRAINT chk_data_scheda check(data_inizio_scheda < data_fine_scheda)
);

------ESERCIZIO------
CREATE TABLE Esercizio (
    nome_esercizio        VARCHAR2(35),
    nome_gruppo_muscolare VARCHAR2(35),
    
    CONSTRAINT pk_esercizio PRIMARY KEY ( nome_esercizio )
);

------Contiene------
CREATE TABLE Contiene (
    numero_documento_utente CHAR(9),
    data_inizio_scheda      DATE,
    nome_esercizio          VARCHAR2(35),
    numero_serie            NUMBER(2, 0) CHECK ( numero_serie > 0 ),
    peso                    NUMBER(3, 0) CHECK ( peso >= 0 ),
    numero_ripetizioni      NUMBER(3, 0) CHECK ( numero_ripetizioni >= 0 ),
    secondi_di_recupero     NUMBER(3, 0) CHECK ( secondi_di_recupero >= 0 ),
    
    CONSTRAINT pk_include PRIMARY KEY ( numero_documento_utente,
                                        data_inizio_scheda,
                                        nome_esercizio,
                                        numero_serie ),
    CONSTRAINT fk_scheda_include FOREIGN KEY ( numero_documento_utente,
                                               data_inizio_scheda )
        REFERENCES scheda_di_allenamento ( numero_documento_utente,
                                           data_inizio_scheda ) 
        ON DELETE CASCADE,
    CONSTRAINT fk_include_esercizio FOREIGN KEY ( nome_esercizio )
        REFERENCES esercizio ( nome_esercizio ) ON DELETE CASCADE
);

------UTENZA------
CREATE TABLE Utenza (
    numero_fattura   VARCHAR2(10),
    via_sede         VARCHAR2(30) NOT NULL,
    civico_sede      VARCHAR2(5) NOT NULL,
    cap_sede         NUMBER(5, 0) NOT NULL,
    importo_utenza   NUMBER(6, 2) CHECK ( importo_utenza > 0 ) NOT NULL,
    pagamento_utenza CHAR(1) CHECK ( UPPER(pagamento_utenza) = 'S'
                                     OR UPPER(pagamento_utenza) = 'N' ) NOT NULL,
    data_scadenza    DATE NOT NULL,
    tipologia_utenza VARCHAR2(30) NOT NULL,
    
    CONSTRAINT pk_utenza PRIMARY KEY ( numero_fattura ),
    CONSTRAINT fk_utenza_sede FOREIGN KEY ( via_sede,
                                            civico_sede,
                                            cap_sede )
        REFERENCES sede ( via_sede,
                          civico_sede,
                          cap_sede )
        ON DELETE CASCADE
);

------TIPOLOGIA TURNO------
CREATE TABLE Tipologia_turno (
    nome_tipologia_turno   VARCHAR2(15),
    giorno_settimana_turno CHAR(3) CHECK ( UPPER(giorno_settimana_turno) = 'LUN'
                                           OR UPPER(giorno_settimana_turno) = 'MAR'
                                           OR UPPER(giorno_settimana_turno) = 'MER'
                                           OR UPPER(giorno_settimana_turno) = 'GIO'
                                           OR UPPER(giorno_settimana_turno) = 'VEN'
                                           OR UPPER(giorno_settimana_turno) = 'SAB' ) NOT NULL,
    durata_turno           NUMBER(2, 1) CHECK ( durata_turno > 0 ) NOT NULL,
    
    CONSTRAINT pk_tipologia_turno PRIMARY KEY ( nome_tipologia_turno,
                                                giorno_settimana_turno )
);

------ASEEGNAZIONE SETTIMANALE------
CREATE TABLE Assegnazione_settimanale (
    numero_documento_dipendente CHAR(9),
    nome_tipologia_turno        VARCHAR2(15),
    giorno_settimana_turno      CHAR(3),
    data_assegnazione           DATE,
    CONSTRAINT pk_assegnazione PRIMARY KEY ( numero_documento_dipendente,
                                             nome_tipologia_turno,
                                             giorno_settimana_turno,
                                             data_assegnazione ),
    CONSTRAINT fk_tipologia_assegnazione FOREIGN KEY ( nome_tipologia_turno,
                                                       giorno_settimana_turno )
        REFERENCES Tipologia_turno ( nome_tipologia_turno,
                                     giorno_settimana_turno )
            ON DELETE CASCADE,
    CONSTRAINT fk_dipendente_assegnazione FOREIGN KEY ( numero_documento_dipendente )
        REFERENCES Dipendente ( numero_documento_dipendente ) ON DELETE CASCADE
);

------PRESENZA DIPENDENTE------
CREATE TABLE Presenza_dipendente (
    numero_documento_dipendente CHAR(9),
    data_presenza               DATE,
    orario_entrata              DATE,
    via_sede                    VARCHAR2(30),
    civico_sede                 VARCHAR2(5),
    cap_sede                    NUMBER(5, 0),
    nome_tipologia_turno        VARCHAR2(15),
    giorno_settimana_turno      CHAR(3),
    orario_uscita               DATE,
    
    CONSTRAINT pk_presenza PRIMARY KEY ( numero_documento_dipendente,
                                         data_presenza,
                                         orario_entrata ),
    CONSTRAINT fk_presenza_dipendente FOREIGN KEY ( numero_documento_dipendente )
        REFERENCES Dipendente ( numero_documento_dipendente ),
    CONSTRAINT fk_presenza_sede FOREIGN KEY ( via_sede,
                                              civico_sede,
                                              cap_sede )
        REFERENCES Sede ( via_sede,
                          civico_sede,
                          cap_sede ),
    CONSTRAINT fk_tipologia_presenza FOREIGN KEY ( nome_tipologia_turno,
                                                   giorno_settimana_turno )
        REFERENCES Tipologia_turno ( nome_tipologia_turno,
                                     giorno_settimana_turno ) ON DELETE SET NULL
);

------PISCINA------
CREATE TABLE Piscina (
    via_sede       VARCHAR2(30),
    civico_sede    VARCHAR2(5),
    cap_sede       NUMBER(5, 0),
    numero_piscina NUMBER(2, 0),
    larghezza      NUMBER(3, 2) CHECK ( larghezza > 0 ) NOT NULL,
    lunghezza      NUMBER(3, 2) CHECK ( lunghezza > 0 ) NOT NULL,
    profondita     NUMBER(2, 2) CHECK ( profondita > 0 ) NOT NULL,
    capienza       NUMBER(3, 0) CHECK ( capienza > 0 ) NOT NULL,
    numero_corsie  NUMBER(2, 0) CHECK ( numero_corsie > 0 ) NOT NULL,
    
    CONSTRAINT pk_piscina PRIMARY KEY ( numero_piscina,
                                        via_sede,
                                        civico_sede,
                                        cap_sede ),
    CONSTRAINT fk_sede_piscina FOREIGN KEY ( via_sede,
                                             civico_sede,
                                             cap_sede )
        REFERENCES Sede ( via_sede,
                          civico_sede,
                          cap_sede )
);

------PRENOTAZIONE------
CREATE TABLE Prenotazione (
    numero_documento_utente CHAR(9),
    via_sede                VARCHAR2(30),
    civico_sede             VARCHAR2(5),
    cap_sede                NUMBER(5, 0),
    numero_piscina          NUMBER(2, 0),
    data_prenotazione       DATE,
    orario_prenotazione     DATE,
    numero_ore              NUMBER(1, 0) CHECK ( numero_ore BETWEEN 1 AND 6 ) NOT NULL,
    prezzo_prenotazione     NUMBER(3, 2) NOT NULL,
    prenotazione_pagata     CHAR(1) CHECK ( UPPER(prenotazione_pagata) = 'S'
                                        OR UPPER(prenotazione_pagata) = 'N' ) NOT NULL,
    CONSTRAINT pk_prenotazione PRIMARY KEY ( numero_documento_utente,
                                             via_sede,
                                             civico_sede,
                                             cap_sede,
                                             numero_piscina,
                                             data_prenotazione,
                                             orario_prenotazione ),
    CONSTRAINT fk_piscina_prenotazione FOREIGN KEY ( via_sede,
                                                     civico_sede,
                                                     cap_sede,
                                                     numero_piscina )
        REFERENCES Piscina ( via_sede,
                             civico_sede,
                             cap_sede,
                             numero_piscina ) ON DELETE CASCADE,
    CONSTRAINT fk_utente_prenotazione FOREIGN KEY ( numero_documento_utente )
        REFERENCES Utente ( numero_documento_utente )
);
